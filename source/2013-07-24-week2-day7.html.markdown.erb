---
title: Week 2 Day 7 RSpec
date: 2013-07-24 17:23 PDT
tags: log
---
# Week 2 Day 7

## RSpec

### What We Did and Learned

We continued by reading the [RSpec
Expectations](https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/raise-error-matcher)
for syntax and writing a test to fail when typing bundle i it should not raise
an error. However, the both of us could not get our test to fail, which is what
we want.

We also did not know what and where Bundler.ui.error does. We learned how to
quickly search for code in files by either using the tool ack or using the
commandline
[grep](http://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/).

`grep -r "def ui" .`

-r is short for recursive. This searches within the current directory and all
directories within it with the words "def ui."

Jessica explained recursion. It is called recursion because it calls itself.
Bar calls bar and the return is the basecase.

    def subtraction(bar)
      return bar if bar == 1
      subtraction(bar - 1)
    end

We also learned that in Ruby convention, the name of the Class is the filename.
example: Class UI would have a file called ui.rb

Our coach, Jessica, poked around the specs in Bundler and found the Bundler
test is handled differently. She directed us to how our test should look like.
After implementing the correct test, we got our test to fail and we are working
on getting it to pass.

    require "spec_helper"

    describe "bundle i error" do
      it "should not raise an error" do
        bundle "i"
      expect(err).to be_empty
      end
    end

<br />

    Failures:

    1) bundle i error prints a friendly message
    Failure/Error: expect{ bundle :i }.to raise_error
       expected Exception but nothing was raised
     # ./spec/bundle_i_spec.rb:5:in `block (2 levels) in <top (required)>'

    Finished in 1.22 seconds
    1 example, 1 failure

    Failed examples:

    rspec ./spec/bundle_i_spec.rb:4 # bundle i error prints a friendly message
